head	1.9;
access;
symbols;
locks; strict;
comment	@ * @;


1.9
date	96.01.30.01.18.48;	author bart;	state Exp;
branches;
next	1.8;

1.8
date	96.01.28.01.49.14;	author bart;	state Exp;
branches;
next	1.7;

1.7
date	96.01.28.01.07.45;	author bart;	state Exp;
branches;
next	1.6;

1.6
date	96.01.27.23.46.20;	author bart;	state Exp;
branches;
next	1.5;

1.5
date	96.01.26.01.09.39;	author bart;	state Exp;
branches;
next	1.4;

1.4
date	96.01.26.00.58.20;	author bart;	state Exp;
branches;
next	1.3;

1.3
date	96.01.26.00.35.33;	author bart;	state Exp;
branches;
next	1.2;

1.2
date	96.01.18.20.54.46;	author bart;	state Exp;
branches;
next	1.1;

1.1
date	96.01.18.20.40.14;	author bart;	state Exp;
branches;
next	;


desc
@blocks-world A* state-space planner
@


1.9
log
@serious upgrade -- incremental do-undo for ida
@
text
@#include <stdio.h>
#include <sys/time.h>
#include <sys/resource.h>
extern void *malloc(unsigned);
extern void free(void *);
extern void perror(char *);
extern void printf(char *, ...);
#ifndef __GNUC__
extern int strcmp(char *, char *);
#endif
extern int atoi(char *);
extern int getrusage(int, struct rusage *);

#ifdef __GNUC__
#define INLINE inline
#else
#define INLINE /*inline*/
#endif

double cpu_secs(void) {
  struct rusage ru;
  
  /* get user cpu */
  if (getrusage(RUSAGE_SELF, &ru) < 0) {
    perror("getrusage");
    exit(-1);
  }
  return ru.ru_utime.tv_sec + ru.ru_utime.tv_usec / 1000000.0;
}

static int getint(void) {
  char buf[128];

  gets(buf);
  return atoi(buf);
}

struct block {
  int on;
};

struct state {
  struct block *blocks;
  int *tower_tops;
  int n_towers;
  int h_score, g_score, t_score;   /* heuristic, real, total */
  struct state *parent;
  int moved_block, moved_to;
  struct state *q_next;   /* used only by a_star() */
};

/* global state */
static int n_blocks;
static struct state *open, *closed;
static struct state *start, *goal;
/* statistics */
static int stat_nodes = 1;
static int stat_cached = 1;
static int stat_open = 1;
static int stat_max_open = 1;
static int stat_max_g = 0;
static int stat_min_h;
/* control */
int verbose = 0;
int ida = 0;
int node_limit = 0;

static struct state *alloc_state(void) {
  struct state *new = malloc(sizeof(struct state));

  if (!new) {
    perror("malloc (new)");
    exit(-1);
  }
  new->blocks = malloc(sizeof(struct block) * n_blocks);
  if (!new->blocks) {
    perror("malloc (new->blocks)");
    exit(-1);
  }
  /*
   * We should be careful and only allocate n_towers
   * new tower_tops, but that might be one too few
   * for move(), which may want to start a new tower...
   * Punt for now.
   */
  new->tower_tops = malloc(sizeof(int) * n_blocks);
  if (!new->tower_tops) {
    perror("malloc (new->tower_tops)");
    exit(-1);
  }
  return new;
}

static void free_state(struct state *s) {
  free(s->blocks);
  free(s->tower_tops);
  free(s);
}

static int same_state(struct state *s1, struct state *s2) {
  int i;
  
  if (s1->n_towers != s2->n_towers || s1->h_score != s2->h_score)
    return 0;
  for (i = 0; i < n_blocks; i++)
    if (s1->blocks[i].on != s2->blocks[i].on)
      return 0;
  return 1;
}

int duplicate_state(struct state *s, struct state *qs) {
  if (same_state(s, qs)) {
    if (s->g_score < qs->g_score) {
      /* copy relevant state for new path */
      qs->g_score = s->g_score;
      qs->t_score = s->t_score;
      qs->moved_block = s->moved_block;
      qs->moved_to = s->moved_to;
      qs->parent = s->parent;
    }
    free_state (s);
    return 1;
  }
  return 0;
}

void push_state(struct state *s) {
  struct state *qp, **qfp;

  /* deal with duplicates */
  for (qp = closed; qp; qp = qp->q_next)
    if (duplicate_state(s, qp))
      return;
  for (qp = open; qp; qp = qp->q_next)
    if (duplicate_state(s, qp))
      return;
  /* update stats */
  stat_cached++;
  stat_open++;
  if (stat_open > stat_max_open)
    stat_max_open=stat_open;
  /* insert in appropriate place */
  qfp = &open;
  for (qp = open; qp; qp = qp->q_next) {
    if (qp->t_score > s->t_score ||
	(qp->t_score == s->t_score && qp->h_score > s->h_score))
      break;
    qfp = &qp->q_next;
  }
  s->q_next = qp;
  *qfp = s;
}

INLINE static int on_correct(struct state *s, int b) {
  return s->blocks[b].on == goal->blocks[b].on;
}

/*
 * Returns true only if b is above some block bmatch
 * in both s and goal .
 * i.e., it would be permissible for this function to
 * return false where b is above a correct block
 * However, the current version is both accurate
 * and quadratic -- uggh.
 */
static int above_correct(struct state *s, int b) {
  int gb, sb;
  
  for (gb = goal->blocks[b].on; gb > -1; gb = goal->blocks[gb].on)
    for (sb = s->blocks[b].on; sb > -1; sb = s->blocks[sb].on)
      if (gb == sb)
	return 1;
  return 0;
}

static void score_state(struct state *s, int g) {
  int h, i, btop, badb, b;
  
  h = 0;
  for (i = 0; i < s->n_towers; i++) {
    btop = s->tower_tops[i];
    badb = -1;
    for (b = btop; b > -1; b = s->blocks[b].on)
      if (!on_correct(s, b))
	badb = b;
    if (badb == -1)
      continue;
    for (b = btop; b != s->blocks[badb].on; b = s->blocks[b].on)
      h += 1 + above_correct(s, b);
  }
  s->g_score = g;
  s->h_score = h;
  s->t_score = g + h;
}

static int score_towertop(struct state *s, int t) {
  int btop, b;
  
  btop = s->tower_tops[t];
  for (b = btop; b > -1; b = s->blocks[b].on)
    if (!on_correct(s, b))
      break;
  if (b == -1)
    return 0;
  return 1 + above_correct(s, btop);
}

static struct state *copy_state(struct state *parent) {
  struct state *new = alloc_state();
  int i;
  
  for (i = 0; i < n_blocks; i++)
    new->blocks[i] = parent->blocks[i];
  new->n_towers = parent->n_towers;
  for (i = 0; i < parent->n_towers; i++)
    new->tower_tops[i] = parent->tower_tops[i];
  new->g_score = parent->g_score;
  new->h_score = parent->h_score;
  new->t_score = parent->t_score;
  new->parent = parent;
  return new;
}
    
static void move(struct state *s, int t_from, int t_to) {
  int block, from, to;
  int old_tt_score, new_tt_score;

  stat_nodes++;
  if (node_limit && stat_nodes > node_limit) {
    if (verbose > 0)
      printf("Node limit %d exceeded after %g secs\n", node_limit, cpu_secs());
    else
      printf("%g %d\n", cpu_secs(), -1);
    exit(-1);
  }
  /* get some invariants */
  if (t_from == -1)
    abort();
  block = s->tower_tops[t_from];
  from = s->blocks[block].on;
  if (from == -1 && t_to == -1)
    abort();
  to = -1;
  if (t_to > -1)
    to = s->tower_tops[t_to];
  old_tt_score = score_towertop(s, t_from);
  /* fix up destination */
  s->blocks[block].on = to;
  if (t_to > -1) {
    s->tower_tops[t_to] = block;
    new_tt_score = score_towertop(s, t_to);
  } else {
    s->tower_tops[s->n_towers++] = block;
    new_tt_score = score_towertop(s, s->n_towers - 1);
  }
  /* fix up source */
  if (from > -1)
    s->tower_tops[t_from] = from;
  else
    s->tower_tops[t_from] = s->tower_tops[--s->n_towers];
  /* finish the move */
  s->g_score++;
  s->h_score += new_tt_score - old_tt_score;
  s->t_score = s->g_score + s->h_score;
  s->moved_block = block;
  s->moved_to = to;
}

static struct state *read_state(void) {
  struct state *new = alloc_state();
  int on, i, j;

  /* read the blocks in */
  for (i = 0; i < n_blocks; i++) {
    on = getint();
    if (on < -1 || on >= n_blocks)
      abort();
    new->blocks[i].on = on;
  }
  /* calculate the tower tops -- quadratic */
  new->n_towers = 0;
  for (i = 0; i < n_blocks; i++) {
    for (j = 0; j < n_blocks; j++)
      if (new->blocks[j].on == i)
	break;
    if (j >= n_blocks)
      new->tower_tops[new->n_towers++] = i;
  }
  /* rest will be filled in by caller */
  return new;
}

static void read_problem(void) {
  /* get number of blocks */
  n_blocks = getint();
  if (getchar() != '\n')
    abort();
  start = read_state();
  if (getchar() != '\n')
    abort();
  goal = read_state();
  if (getchar() != EOF)
    abort();
}

static void a_star_write_path(struct state *sp) {
  if (!sp->parent)
    return;
  a_star_write_path(sp->parent);
  printf("%d %d\n", sp->moved_block, sp->moved_to);
}

static int a_star_length(struct state *g) {
  int n = 0;
  struct state *sp;

  for (sp = g; sp->parent; sp = sp->parent)
    n++;
  return n;
}


static void a_star_answer(struct state *g) {
  /* print stats */
  if (g->g_score != a_star_length(g))
    abort();
  if (verbose > 0) {
    printf("%g secs\n", cpu_secs());
    printf("%d nodes, %d cached, %d max open\n",
	   stat_nodes, stat_cached, stat_max_open);
    printf("%d heuristic, %d actual\n\n", start->h_score, g->g_score);
    a_star_write_path(g);
  } else {
    printf("%g %d %d %d %d %d\n",
	   cpu_secs(),
	   stat_nodes, stat_cached, stat_max_open,
	   start->h_score, g->g_score);
  }
}


static int a_star(void) {
  struct state *s, *s0;
  int i, j;

  push_state(start);
  while (open) {
    s = open;
    if (same_state(s, goal)) {
      a_star_answer(s);
      return 0;
    }
    open = open->q_next;
    --stat_open;
    if (verbose > 1 && s->g_score > stat_max_g) {
      stat_max_g = s->g_score;
      printf("g max now %d\n", stat_max_g);
    }
    if (verbose > 1 && s->h_score < stat_min_h) {
      stat_min_h = s->h_score;
      printf("h min now %d\n", stat_min_h);
    }
    s->q_next = closed;
    closed = s;
    /* try tabletop moves first */
    for (i = 0; i < s->n_towers; i++)
      if (s->blocks[s->tower_tops[i]].on > -1) {
	s0 = copy_state(s);
	move(s0, i, -1);
	push_state(s0);
      }
    /* then try tower-to-tower */
    for (i = 0; i < s->n_towers; i++)
      for (j = 0; j < s->n_towers; j++)
	if (i != j) {
	  s0 = copy_state(s);
	  move(s0, i, j);
	  push_state(s0);
	}
  }
  printf("no solution!\n");
  return -1;
}
  
/* for do-undo move buffering (for depth_first()) */
struct protect {
  int t_from, t_to;
  int n_towers;
  int block, from, to;
  int h_score, g_score, t_score;
  struct protect *parent;
  int last_top;
};

static INLINE void global_protect_move(struct state *s, struct protect *p, struct protect *parent) {
  p->h_score = s->h_score;
  p->g_score = s->g_score;
  p->t_score = s->t_score;
  p->parent = parent;
  p->n_towers = s->n_towers;
}

static INLINE void local_protect_move(struct state *s, struct protect *p, int t_from, int t_to) {
  p->t_from = t_from;
  p->t_to = t_to;
  p->block = s->tower_tops[t_from];
  if (t_to > -1)
    p->to = s->tower_tops[t_to];
  else
    p->to = -1;
  p->from = s->blocks[p->block].on;
  if (p->from == -1)
    p->last_top = s->tower_tops[s->n_towers - 1];
}

static INLINE void backout_move(struct state *s, struct protect *p) {
  s->n_towers = p->n_towers;
  s->tower_tops[p->t_from] = p->block;
  if (p->t_to > -1)
    s->tower_tops[p->t_to] = p->to;
  if (p->from == -1)
    s->tower_tops[s->n_towers - 1] = p->last_top;
  s->blocks[p->block].on = p->from;
  s->h_score = p->h_score;
  s->g_score = p->g_score;
  s->t_score = p->t_score;
}

static void ida_write_path(struct state *s, struct protect *p) {
  int moved_block, moved_to;
  
  if (!p)
    return;
  backout_move(s, p);
  moved_block = p->block;
  moved_to = p->to;
  ida_write_path(s, p->parent);
  printf("%d %d\n", moved_block, moved_to);
}

static int ida_length(struct protect *p) {
  int n = 0;

  while(p) {
    p = p->parent;
    n++;
  }
  return n;
}


static void ida_answer(struct state *g, struct protect *p) {
  g = copy_state(g);
  /* print stats */
  if (g->g_score != ida_length(p))
    abort();
  if (verbose > 0) {
    printf("%g secs\n", cpu_secs());
    printf("%d nodes\n",
	   stat_nodes);
    printf("%d heuristic, %d actual\n\n", start->h_score, g->g_score);
    ida_write_path(g, p);
  } else {
    printf("%g %d %d %d\n",
	   cpu_secs(), stat_nodes, 
	   start->h_score, g->g_score);
  }
}

static int depth_first(struct state *s, int c, struct protect *pp) {
  struct protect p;
  int i, j;
  
  if (s->t_score > c)
    return 0;
  if (same_state(s, goal)) {
    ida_answer(s, pp);
    return 1;
  }
  global_protect_move(s, &p, pp);
  /* try tabletop moves first */
  for (i = 0; i < s->n_towers; i++)
    if (s->blocks[s->tower_tops[i]].on > -1) {
      local_protect_move(s, &p, i, -1);
      move(s, i, -1);
      if (depth_first(s, c, &p))
	return 1;
      backout_move(s, &p);
    }
  /* then try tower-to-tower */
  for (i = 0; i < s->n_towers; i++)
    for (j = 0; j < s->n_towers; j++)
      if (i != j) {
	local_protect_move(s, &p, i, j);
	move(s, i, j);
	if (depth_first(s, c, &p))
	  return 1;
	backout_move(s, &p);
      }
  return 0;
}

static int ida_star(void) {
  int c = start->t_score;
  int i;

  for (i = c; i < 2 * c + 2; i++) {
    struct state *s = copy_state(start);
    if (depth_first(s, i, 0))
      return 0;
    free_state(s);
  }
  printf("no solution!\n");
  return -1;
}
  

int main(int argc, char **argv) {
  argv++; argc--;
  while (argc > 0)
    if (argv[0][0] != '-')
      abort();
    else
      switch (argv[0][1]) {
      case 'v':
	if (argc < 2)
	  abort();
	verbose = atoi(argv[1]);
	argv += 2; argc -= 2;
	break;
      case 'l':
	if (argc < 2)
	  abort();
	node_limit = atoi(argv[1]);
	argv += 2; argc -= 2;
	break;
      case 'a':
	if (argc < 2)
	  abort();
	if (!strcmp(argv[1], "ida"))
	  ida = 1;
	else
	  ida = 0;
	argv += 2; argc -= 2;
	break;
      }
  read_problem();
  score_state(start, 0);
  start->parent = 0;
  start->moved_block = -1;
  start->moved_to = -1;
  goal->h_score = 0;   /* better be! */
  stat_min_h = start->h_score;
  if (ida)
    return ida_star();
  return a_star();
}
@


1.8
log
@update heuristic incrementally
@
text
@a45 1
  struct state *q_next;
d49 1
d208 1
a208 1
static struct state *move(struct state *parent, int t_from, int t_to) {
d210 16
a225 1
  int i, block, from, to;
a235 6
  /* get the new state set up */
  for (i = 0; i < n_blocks; i++)
    new->blocks[i] = parent->blocks[i];
  new->n_towers = parent->n_towers;
  for (i = 0; i < parent->n_towers; i++)
    new->tower_tops[i] = parent->tower_tops[i];
d237 6
a242 2
  block = new->tower_tops[t_from];
  from = new->blocks[block].on;
d245 2
a246 2
    to = new->tower_tops[t_to];
  old_tt_score = score_towertop(new, t_from);
d248 1
a248 1
  new->blocks[block].on = to;
d250 2
a251 2
    new->tower_tops[t_to] = block;
    new_tt_score = score_towertop(new, t_to);
d253 2
a254 2
    new->tower_tops[new->n_towers++] = block;
    new_tt_score = score_towertop(new, new->n_towers - 1);
d258 1
a258 1
    new->tower_tops[t_from] = from;
d260 1
a260 1
    new->tower_tops[t_from] = new->tower_tops[--new->n_towers];
d262 5
a266 7
  new->g_score = parent->g_score + 1;
  new->h_score = parent->h_score - old_tt_score + new_tt_score;
  new->t_score = new->g_score + new->h_score;
  new->parent = parent;
  new->moved_block = block;
  new->moved_to = to;
  return new;
d306 1
a306 1
static void write_path_backward(struct state *sp) {
d309 1
a309 1
  write_path_backward(sp->parent);
d313 1
a313 1
static int path_length(struct state *g) {
d323 1
a323 1
static void write_answer(struct state *g) {
d325 1
a325 1
  if (g->g_score != path_length(g))
d332 1
a332 1
    write_path_backward(g);
d343 1
a343 1
  struct state *s;
d350 1
a350 1
      write_answer(s);
d367 5
a371 2
      if (s->blocks[s->tower_tops[i]].on > -1)
	push_state(move(s, i, -1));
d375 5
a379 2
	if (i != j)
	  push_state(move(s, i, j));
d385 87
a471 2
static struct state *depth_first(struct state *s, int c) {
  struct state *s0, *t;
d476 5
a480 2
  if (same_state(s, goal))
    return s;
d484 5
a488 5
      s0 = move(s, i, -1);
      t = depth_first(s0, c);
      if (t)
	return t;
      free_state(s0);
d494 5
a498 5
	s0 = move(s, i, j);
	t = depth_first(s0, c);
	if (t)
	  return t;
	free_state(s0);
a504 1
  struct state *s;
d508 2
a509 3
    s = depth_first(start, i);
    if (s) {
      write_answer(s);
d511 1
a511 1
    }
@


1.7
log
@pass tower tops, not towers, to move()
@
text
@d14 6
d154 1
a154 1
static int on_correct(struct state *s, int b) {
d188 2
a189 5
    for (b = btop; b != s->blocks[badb].on; b = s->blocks[b].on) {
      h++;
      if (above_correct(s, b))
	h++;
    }
d196 12
d211 1
d233 3
a235 1
  /* fix up destination tower top */
d238 1
d241 1
d243 1
a243 1
  /* fix up source tower top */
d249 3
a251 2
  new->blocks[block].on = to;
  score_state(new, parent->g_score + 1);
@


1.6
log
@fixed ida memory leak
added node limits
@
text
@d193 1
a193 1
static struct state *move(struct state *parent, int block, int to) {
d195 1
a195 2
  int from = parent->blocks[block].on;
  int i, n;
d211 6
a216 11
  /* fix up source tower top */
  n = new->n_towers;
  for (i = 0; i < n; i++)
    if (new->tower_tops[i] == block)
      break;
  if (i >= n)
    abort();
  if (from > -1)
    new->tower_tops[i] = from;
  else
    new->tower_tops[i] = new->tower_tops[--new->n_towers];
d218 2
a219 8
  n = new->n_towers;
  if (to > -1) {
    for (i = 0; i < n; i++)
      if (new->tower_tops[i] == to)
	break;
    if (i >= n)
      abort();
    new->tower_tops[i] = block;
d223 5
d336 1
a336 1
	push_state(move(s, s->tower_tops[i], -1));
d341 1
a341 1
	  push_state(move(s, s->tower_tops[i], s->tower_tops[j]));
d358 1
a358 1
      s0 = move(s, s->tower_tops[i], -1);
d368 1
a368 1
	s0 = move(s, s->tower_tops[i], s->tower_tops[j]);
@


1.5
log
@added timing, cleaned up statistics
@
text
@d8 1
d10 1
d14 11
d60 1
d199 7
a298 9
  double cpu_secs;
  struct rusage ru;
  
  /* get user cpu */
  if (getrusage(RUSAGE_SELF, &ru) < 0) {
    perror("getrusage");
    exit(-1);
  }
  cpu_secs = ru.ru_utime.tv_sec + ru.ru_utime.tv_usec / 1000000.0;
d303 1
a303 1
    printf("%g secs\n", cpu_secs);
d310 1
a310 1
	   cpu_secs,
d355 1
a355 1
  struct state *t;
d365 2
a366 1
      t = depth_first(move(s, s->tower_tops[i], -1), c);
d369 1
d375 2
a376 1
	t = depth_first(move(s, s->tower_tops[i], s->tower_tops[j]), c);
d379 1
d412 6
@


1.4
log
@added ida*
@
text
@d2 2
d10 1
d276 1
d278 10
d291 1
d297 2
a298 1
    printf("%d %d %d %d %d\n",
d414 1
a414 4
  if (verbose > 1) {
    printf ("heuristic %d\n", start->h_score);
    stat_min_h = start->h_score;
  }
@


1.3
log
@added argument processing
added debuging code
@
text
@d6 1
d43 1
d289 1
a289 1
int main(int argc, char **argv) {
a292 19
  argv++; argc--;
  while (argc > 0)
    if (argv[0][0] != '-')
      abort();
    else
      switch (argv[0][1]) {
      case 'v':
	if (argc < 2)
	  abort();
	verbose = atoi(argv[1]);
	argv += 2; argc -= 2;
	break;
      }
  read_problem();
  score_state(start, 0);
  start->parent = 0;
  start->moved_block = -1;
  start->moved_to = -1;
  goal->h_score = 0;   /* better be! */
a293 4
  if (verbose > 1) {
    printf ("heuristic %d\n", start->h_score);
    stat_min_h = start->h_score;
  }
d324 81
@


1.2
log
@added stats, reversed path printing
@
text
@d38 4
d262 9
d272 12
a283 3
  printf("%d nodes, %d cached, %d max open\n\n",
    stat_nodes, stat_cached, stat_max_open);
  write_path_backward(g);    
d287 1
a287 1
int main(void) {
d291 13
d311 4
d323 8
@


1.1
log
@Initial revision
@
text
@d29 1
d33 5
d108 5
d175 1
a175 1

d251 7
d259 3
a261 4
  struct state *sp;

  for (sp = g; sp->parent; sp = sp->parent)
    printf("%d %d\n", sp->moved_block, sp->moved_to);
d283 1
@
