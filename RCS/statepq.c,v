head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	96.07.20.05.35.17;	author bart;	state Exp;
branches;
next	1.7;

1.7
date	96.07.15.21.35.09;	author bart;	state Exp;
branches;
next	1.6;

1.6
date	96.02.06.23.57.46;	author bart;	state Exp;
branches;
next	1.5;

1.5
date	96.02.06.02.12.25;	author bart;	state Exp;
branches;
next	1.4;

1.4
date	96.02.05.23.53.12;	author bart;	state Exp;
branches;
next	1.3;

1.3
date	96.02.02.17.39.09;	author bart;	state Exp;
branches;
next	1.2;

1.2
date	96.02.02.13.16.53;	author bart;	state Exp;
branches;
next	1.1;

1.1
date	96.02.02.12.42.13;	author bart;	state Exp;
branches;
next	;


desc
@leftist PQ for a_star() states for blocks
@


1.8
log
@major cleanups and bugfixes, especially for lazy deletion
@
text
@#include "blocks.h"

/*
 * Leftist Priority Queue
 * Bart Massey 5/95
 * C version 2/96, 7/96
 *
 * Ala Tarjan.
 */


static struct statepq *mesh(struct statepq *t1, struct statepq *t2);
static struct statepq *fixmesh(struct statepq *t);
/* Merge the queues. */
#define MELD(T1,T2) (fixmesh(mesh((T1),(T2))))

/* Create a new pq. */
struct statepq *statepq_new(void) {
  return 0;
}

/*
 * Perform the lazy deletions, and return the queue
 * with the first element undeleted
 */
static INLINE struct statepq *first(struct statepq *t) {
  struct statepq *t0;
  
  while (t && t->deleted) {
    t0 = t;
    t = MELD(t->l, t->r);
    free(t0);
  }
  return t;
}

static INLINE int score_lt(struct statepq *t1, struct statepq *t2) {
  struct state *s1;
  struct state *s2;
  
  if (!t1 || !t2)
    abort();
  s1 = t1->state;
  s2 = t2->state;
  if (s1->t_score < s2->t_score)
    return 1;
  if (s1->t_score == s2->t_score && s1->g_score > s2->g_score)
    return 1;
  return 0;
}

/* Merge the "right spines" of two pqs in order. */
static struct statepq *mesh(struct statepq *t1, struct statepq *t2) {
  t1 = first(t1);
  t2 = first(t2);
  if (!t1)
    return t2;
  if (!t2)
    return t1;
  if (score_lt(t1, t2)) {
    t1->r = mesh(t1->r, t2);
    return t1;
  }
  t2->r = mesh(t2->r, t1);
  return t2;
}

static INLINE int rank(struct statepq *t) {
  if (!t)
    return 0;
  return t->rank;
}

/*
 * Swap left and right children along the
 * right spine as necessary to restore
 * leftist property.
 */
static struct statepq *fixmesh(struct statepq *t) {
  int rank_l, rank_r;
  struct statepq *l, *r;
  
  t = first(t);
  if (!t)
    return 0;
  l = first(t->l);
  r = fixmesh(t->r);
  rank_l = rank(l);
  rank_r = rank(r);
  if (rank_l < rank_r) {
    t->rank = rank_l + 1;
    t->r = l;
    t->l = r;
    return t;
  }
  t->rank = rank_r + 1;
  t->l = l;
  t->r = r;
  return t;
}

/*
 * Insert into the queue by
 * making a new heap and merging.
 */
struct statepq *statepq_insert(struct state *s, struct statepq *t) {
  struct statepq *t0 = malloc(sizeof(*t0));

  if (!t0) {
    perror("malloc (statepq_insert)");
    exit(-1);
  }
  t0->state = s;
  t0->rank = 1;
  t0->l = 0;
  t0->r = 0;
  t0->deleted = 0;
  s->q = t0;
  return MELD(t, t0);
}

/* lazy deletion */
void statepq_delete(struct statepq *q) {
  q->deleted = 1;
  q->state->q = 0;
}

/*
 * Do any lazy deletions necessary,
 * delete the minimum element,
 * merge its left and right children,
 * save the state associated with the minimum element,
 * and return the altered pq.
 * Caller must dispose of state itself.
 */
struct statepq *statepq_delmin(struct statepq *t, struct state **sp) {
  struct statepq *t0;
  
  t = first(t);
  if (!t) {
    (*sp) = 0;
    return 0;
  }
  t0 = t;
  t = MELD(t->l, t->r);
  t0->state->q = 0;
  *sp = t0->state;
  free(t0);
  return t;
}

/* Merge the pqs. */
struct statepq *statepq_merge(struct statepq *t1, struct statepq *t2) {
  return MELD(t1, t2);
}
@


1.7
log
@fix statepq termination condition
@
text
@d6 1
a6 1
 * C version 2/96
d11 6
d22 15
d38 2
a39 2
  struct state *s1 = t1->state;
  struct state *s2 = t2->state;
d41 4
d54 2
a55 2
  struct statepq *tmp;
  
d60 3
a62 4
  if (score_lt(t2, t1)) {
    tmp = t1;
    t1 = t2;
    t2 = tmp;
d64 2
a65 2
  t1->r = mesh(t1->r, t2);
  return t1;
d81 1
a81 1
  struct statepq *r;
d83 1
d86 1
a86 1
  rank_l = rank(t->l);
d88 1
d92 1
a92 1
    t->r = t->l;
d97 1
a101 5
/* Merge the queues. */
static INLINE struct statepq *meld(struct statepq *t1, struct statepq *t2) {
  return fixmesh(mesh(t1, t2));
}

d119 1
a119 1
  return meld(t, t0);
a127 12
/* Performs the lazy deletions, and return the first undeleted element */
static struct statepq *statepq_first(struct statepq *t) {
  struct statepq *t0;
  
  while (t && t->deleted) {
    t0 = t;
    t = meld(t->l, t->r);
    free(t0);
  }
  return t;
}

d139 1
a139 1
  t = statepq_first(t);
d145 2
a146 1
  t = meld(t->l, t->r);
a148 1
  (*sp)->q = 0;
d154 1
a154 1
  return meld(t1, t2);
@


1.6
log
@fix comment about lazy deletion
@
text
@d106 12
d129 5
a133 4
  if (!t)
    abort();
  while (t->deleted)
    t = meld(t->l, t->r);
@


1.5
log
@add binary hash tree for seen
@
text
@d100 1
a100 4
/*
 * XXX lazy deletion:  Really only valid if you have a node,
 * which you really shouldn't
 */
@


1.4
log
@restructured things to allow lazy deletion
restructured things to get some inlining
@
text
@d96 1
d106 1
d128 1
@


1.3
log
@fixed bad bug in fixmesh()
@
text
@a15 12
/* Is the pq empty? */
int statepq_isempty(struct statepq *t) {
  return !t;
}

/* Extract the value component of a node. */
struct state *statepq_val(struct statepq *t) {
  if (!t)
    abort();
  return t->state;
}

d95 1
d99 6
a104 5
/* The minimum element of the heap */
struct state *statepq_min(struct statepq *t) {
  if (!t)
    return 0;
  return t->state;
d108 5
a112 2
 * Delete the minimum element and
 * merge its left and right children.
d115 1
a115 1
struct statepq *statepq_delmin(struct statepq *t) {
d120 2
d124 1
@


1.2
log
@changes to support efficient PQ for a_star() open list
@
text
@d78 2
a79 1
    t->r = r;
d83 1
a83 2
  t->r = t->l;
  t->l = r;
@


1.1
log
@Initial revision
@
text
@a10 6
struct statepq {
  struct state *state;
  int rank;  
  struct statepq *l, *r;
};

@
